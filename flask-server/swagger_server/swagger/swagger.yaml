---
swagger: "2.0"
info:
  description: "Dis the server"
  version: "1.0.0"
  title: "Swagbot API"
host: "localhost:8000"
basePath: "/api"
tags:
- name: "user"
  description: ""
- name: "room"
  description: ""
- name: "message"
  description: ""
schemes:
- "https"
- "http"
paths:
  /users:
    get:
      tags:
      - "user"
      summary: "Get all users"
      description: ""
      operationId: "get_all_users"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "List of all users"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
    post:
      tags:
      - "user"
      summary: "Creates a new user"
      description: ""
      operationId: "add_user"
      parameters:
      - in: "body"
        name: "name"
        description: "User must provide a name"
        required: true
        schema:
          type: "string"
      responses:
        "201":
          description: "Created user"
          schema:
            $ref: "#/definitions/User"
        "405":
          description: "Invalid input"
        "409":
          description: "User already exists"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/{id}:
    get:
      tags:
      - "user"
      summary: "Get user from id"
      description: ""
      operationId: "get_user_from_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id for the name needed"
        required: true
        type: "string"
      responses:
        "200":
          description: "Returns single user"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Could not get user from id"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
    delete:
      tags:
      - "user"
      summary: "Delete user from id"
      description: ""
      operationId: "delete_user_from_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id for the name needed"
        required: true
        type: "string"
      responses:
        "200":
          description: "Users deletetd"
        "400":
          description: "Could not delete user from id"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /rooms:
    get:
      tags:
      - "room"
      summary: "Get all rooms"
      description: ""
      operationId: "get_rooms"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "List of all rooms"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Room"
        "400":
          description: "Unable to retrieve rooms"
      x-swagger-router-controller: "swagger_server.controllers.room_controller"
    post:
      tags:
      - "room"
      summary: "Creates a new room"
      description: ""
      operationId: "create_room"
      parameters:
      - in: "body"
        name: "userId"
        description: "UserId need to create room"
        required: true
        schema:
          type: "string"
      responses:
        "201":
          description: "Room successfully created"
          schema:
            $ref: "#/definitions/Room"
        "400":
          description: "Unable to create room"
      x-swagger-router-controller: "swagger_server.controllers.room_controller"
  /rooms/{id}:
    get:
      tags:
      - "room"
      summary: "Get room from id"
      description: ""
      operationId: "get_room"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The room id"
        required: true
        type: "string"
      responses:
        "200":
          description: "Single room from id"
          schema:
            $ref: "#/definitions/Room"
        "400":
          description: "Could not get room from id"
      x-swagger-router-controller: "swagger_server.controllers.room_controller"
  /room/{room_id}/users:
    get:
      tags:
      - "room"
      operationId: "get_room_users"
      parameters:
      - name: "room_id"
        in: "path"
        description: "The id for the room needed"
        required: true
        type: "string"
      responses:
        "200":
          description: "List of users in room"
          schema:
            $ref: "#/definitions/RoomUsers"
        "400":
          description: "Could not get room from id"
      x-swagger-router-controller: "swagger_server.controllers.room_controller"
    post:
      tags:
      - "room"
      operationId: "join_room"
      parameters:
      - name: "room_id"
        in: "path"
        description: "The id for the room needed"
        required: true
        type: "string"
      - in: "body"
        name: "userId"
        required: true
        schema:
          type: "string"
      responses:
        "201":
          description: "List of users in room"
          schema:
            $ref: "#/definitions/RoomUsers"
        "400":
          description: "Could not get room from id"
      x-swagger-router-controller: "swagger_server.controllers.room_controller"
  /room/{room_id}/messages:
    get:
      tags:
      - "message"
      operationId: "get_messages_from_id"
      parameters:
      - name: "room_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "user_id"
        description: "User must provide if"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Room successfully retrieved from id"
          schema:
            $ref: "#/definitions/RoomMessages"
        "400":
          description: "Could not get room from id"
      x-swagger-router-controller: "swagger_server.controllers.message_controller"
  /room/{room_id}/{user_id}/messages:
    get:
      tags:
      - "message"
      operationId: "get_user_room_messages"
      parameters:
      - name: "room_id"
        in: "path"
        description: "The id for the room needed"
        required: true
        type: "string"
      - name: "user_id"
        in: "path"
        description: "The id for the user needed"
        required: true
        type: "string"
      responses:
        "200":
          description: "Room successfully retrieved from id"
          schema:
            $ref: "#/definitions/RoomMessages"
        "400":
          description: "Could not get room from id"
      x-swagger-router-controller: "swagger_server.controllers.message_controller"
    post:
      tags:
      - "message"
      summary: "Post message in room"
      operationId: "post_room_message"
      parameters:
      - name: "room_id"
        in: "path"
        description: "The id for the room needed"
        required: true
        type: "string"
      - name: "user_id"
        in: "path"
        description: "The id for the user needed"
        required: true
        type: "string"
      - in: "body"
        name: "message"
        required: true
        schema:
          type: "string"
      responses:
        "201":
          description: "Message posted"
        "400":
          description: "Could not get post message in room"
      x-swagger-router-controller: "swagger_server.controllers.message_controller"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "string"
      username:
        type: "string"
    example:
      id: "id"
      username: "username"
  Room:
    type: "object"
    properties:
      id:
        type: "string"
      hostId:
        type: "string"
      Users:
        type: array
        items:
          $ref: "#/definitions/User"
    example:
      hostId: "hostId"
      id: "id"

  RoomUsers:
    type: "object"
    properties:
      id:
        type: "string"
      Users:
        type: "array"
        items:
          $ref: "#/definitions/User"
    example:
      id: "id"
      Users:
      - id: "id"
        username: "username"
      - id: "id"
        username: "username"
  RoomMessages:
    type: "object"
    properties:
      room:
        $ref: "#/definitions/Room"
      Messages:
        type: "array"
        items:
          $ref: "#/definitions/UserMessages"
    example:
      Messages:
      - User:
          id: "id"
          username: "username"
        Messages:
        - Text: "Text"
          id: "id"
        - Text: "Text"
          id: "id"
      - User:
          id: "id"
          username: "username"
        Messages:
        - Text: "Text"
          id: "id"
        - Text: "Text"
          id: "id"
      room:
        hostId: "hostId"
        id: "id"
  UserMessages:
    type: "object"
    properties:
      User:
        $ref: "#/definitions/User"
      Messages:
        type: "array"
        items:
          $ref: "#/definitions/Message"
    example:
      User:
        id: "id"
        username: "username"
      Messages:
      - Text: "Text"
        id: "id"
      - Text: "Text"
        id: "id"
  Message:
    type: "object"
    properties:
      id:
        type: "string"
      Text:
        type: "string"
    example:
      Text: "Text"
      id: "id"
